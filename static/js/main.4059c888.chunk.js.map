{"version":3,"sources":["Modal.js","App.js","index.js"],"names":["Modal","props","className","children","App","Board","state","difficulty","rows","columns","numUnopened","numMines","flagsLeft","hasLost","hasWon","mines","Array","fill","map","cleared","flagged","surrounding","changeDifficulty","bind","changeCleared","changeFlagged","minesToPlace","row","Math","floor","random","col","i","j","newDifficulty","newRows","newColumns","newFlagsLeft","newNumUnopened","newNumMines","newMines","newSurrounding","this","setState","squareFlagged","squareCleared","squareMine","newCleared","newFlagged","slice","clearSquares","winStatus","flat","reduce","acc","cur","message","onChange","rowindex","colindex","onClick","onContextMenu","isMine","isFlagged","isCleared","React","Component","Selector","handleChange","value","e","target","style","width","length","Square","handleClick","handleContextMenu","preventDefault","info","squarecolor","color","background","NewGame","window","location","reload","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4059c888.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Modal = props => {\n  return (\n    <div className=\"modal-wrapper\">\n      <div className=\"modal-backdrop\"> </div>\n      <div className=\"modal-box\"> {props.children} </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Modal } from \"./Modal\";\nimport \"./normalize.css\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: \"Easy\",\n      rows: 9,\n      columns: 9,\n      numUnopened: 9 * 9,\n      numMines: 10,\n      flagsLeft: 10,\n      hasLost: false,\n      hasWon: false,\n      mines: Array(9)\n        .fill()\n        .map(() => Array(9).fill(false)),\n      cleared: Array(9)\n        .fill()\n        .map(() => Array(9).fill(false)),\n      flagged: Array(9)\n        .fill()\n        .map(() => Array(9).fill(false)),\n      surrounding: Array(9)\n        .fill()\n        .map(() => Array(9).fill(0))\n    };\n    this.changeDifficulty = this.changeDifficulty.bind(this);\n    this.changeCleared = this.changeCleared.bind(this);\n    this.changeFlagged = this.changeFlagged.bind(this);\n\n    // place mines randomly on the board\n    let minesToPlace = this.state.numMines;\n    while (minesToPlace > 0) {\n      let row = Math.floor(Math.random() * this.state.rows);\n      let col = Math.floor(Math.random() * this.state.columns);\n\n      if (!this.state.mines[row][col]) {\n        this.state.mines[row][col] = true;\n        minesToPlace--;\n      }\n    }\n\n    // calculate number of surrounding mines\n    for (let i = 0; i < this.state.rows; i++) {\n      for (let j = 0; j < this.state.columns; j++) {\n        // if the square is a mine, add one to its neighbors' counts\n        if (this.state.mines[i][j]) {\n          // squares at the corners\n          if (i === 0 && j === 0) {\n            this.state.surrounding[i][j + 1] += 1;\n            this.state.surrounding[i + 1][j] += 1;\n            this.state.surrounding[i + 1][j + 1] += 1;\n          } else if (i === 0 && j === this.state.columns - 1) {\n            this.state.surrounding[i][j - 1] += 1;\n            this.state.surrounding[i + 1][j] += 1;\n            this.state.surrounding[i + 1][j - 1] += 1;\n          } else if (i === this.state.rows - 1 && j === 0) {\n            this.state.surrounding[i][j + 1] += 1;\n            this.state.surrounding[i - 1][j] += 1;\n            this.state.surrounding[i - 1][j + 1] += 1;\n          } else if (\n            i === this.state.rows - 1 &&\n            j === this.state.columns - 1\n          ) {\n            this.state.surrounding[i][j - 1] += 1;\n            this.state.surrounding[i - 1][j] += 1;\n            this.state.surrounding[i - 1][j - 1] += 1;\n          }\n          // squares on an edge row or column\n          else if (i === 0) {\n            this.state.surrounding[i][j - 1] += 1;\n            this.state.surrounding[i][j + 1] += 1;\n            this.state.surrounding[i + 1][j - 1] += 1;\n            this.state.surrounding[i + 1][j] += 1;\n            this.state.surrounding[i + 1][j + 1] += 1;\n          } else if (i === this.state.rows - 1) {\n            this.state.surrounding[i][j - 1] += 1;\n            this.state.surrounding[i][j + 1] += 1;\n            this.state.surrounding[i - 1][j - 1] += 1;\n            this.state.surrounding[i - 1][j] += 1;\n            this.state.surrounding[i - 1][j + 1] += 1;\n          } else if (j === 0) {\n            this.state.surrounding[i][j + 1] += 1;\n            this.state.surrounding[i + 1][j] += 1;\n            this.state.surrounding[i + 1][j + 1] += 1;\n            this.state.surrounding[i - 1][j] += 1;\n            this.state.surrounding[i - 1][j + 1] += 1;\n          } else if (j === this.state.columns - 1) {\n            this.state.surrounding[i][j - 1] += 1;\n            this.state.surrounding[i + 1][j] += 1;\n            this.state.surrounding[i + 1][j - 1] += 1;\n            this.state.surrounding[i - 1][j] += 1;\n            this.state.surrounding[i - 1][j - 1] += 1;\n          } else {\n            this.state.surrounding[i][j - 1] += 1;\n            this.state.surrounding[i][j + 1] += 1;\n            this.state.surrounding[i + 1][j] += 1;\n            this.state.surrounding[i + 1][j + 1] += 1;\n            this.state.surrounding[i + 1][j - 1] += 1;\n            this.state.surrounding[i - 1][j] += 1;\n            this.state.surrounding[i - 1][j + 1] += 1;\n            this.state.surrounding[i - 1][j - 1] += 1;\n          }\n        }\n      }\n    }\n  }\n\n  // event handler, will be passed to Selector component\n  changeDifficulty(newDifficulty) {\n    let newRows;\n    let newColumns;\n    let newFlagsLeft;\n    let newNumUnopened;\n    let newNumMines;\n\n    switch (newDifficulty) {\n      case \"Easy\":\n        newRows = 9;\n        newColumns = 9;\n        newNumUnopened = 9 * 9;\n        newNumMines = 10;\n        newFlagsLeft = 10;\n        break;\n      case \"Medium\":\n        newRows = 16;\n        newColumns = 16;\n        newNumUnopened = 16 * 16;\n        newNumMines = 40;\n        newFlagsLeft = 40;\n        break;\n      case \"Hard\":\n        newRows = 16;\n        newColumns = 30;\n        newNumUnopened = 16 * 30;\n        newNumMines = 99;\n        newFlagsLeft = 99;\n        break;\n      default:\n        newRows = 9;\n        newColumns = 9;\n        newNumUnopened = 9 * 9;\n        newNumMines = 10;\n        newFlagsLeft = 10;\n        break;\n    }\n\n    // new array for randomly placed mines\n    let newMines = Array(newRows)\n      .fill()\n      .map(() => Array(newColumns).fill(false));\n    let minesToPlace = newNumMines;\n    while (minesToPlace > 0) {\n      let row = Math.floor(Math.random() * newRows);\n      let col = Math.floor(Math.random() * newColumns);\n\n      if (!newMines[row][col]) {\n        newMines[row][col] = true;\n        minesToPlace--;\n      }\n    }\n\n    // new array for count of surrounding mines\n    let newSurrounding = Array(newRows)\n      .fill()\n      .map(() => Array(newColumns).fill(0));\n    for (let i = 0; i < newRows; i++) {\n      for (let j = 0; j < newColumns; j++) {\n        // if the square is a mine, add one to its neighbors' counts\n        if (newMines[i][j]) {\n          // squares at the corners\n          if (i === 0 && j === 0) {\n            newSurrounding[i][j + 1] += 1;\n            newSurrounding[i + 1][j] += 1;\n            newSurrounding[i + 1][j + 1] += 1;\n          } else if (i === 0 && j === newColumns - 1) {\n            newSurrounding[i][j - 1] += 1;\n            newSurrounding[i + 1][j] += 1;\n            newSurrounding[i + 1][j - 1] += 1;\n          } else if (i === newRows - 1 && j === 0) {\n            newSurrounding[i][j + 1] += 1;\n            newSurrounding[i - 1][j] += 1;\n            newSurrounding[i - 1][j + 1] += 1;\n          } else if (i === newRows - 1 && j === newColumns - 1) {\n            newSurrounding[i][j - 1] += 1;\n            newSurrounding[i - 1][j] += 1;\n            newSurrounding[i - 1][j - 1] += 1;\n          }\n          // squares at edge rows or columns\n          else if (i === 0) {\n            newSurrounding[i][j - 1] += 1;\n            newSurrounding[i][j + 1] += 1;\n            newSurrounding[i + 1][j - 1] += 1;\n            newSurrounding[i + 1][j] += 1;\n            newSurrounding[i + 1][j + 1] += 1;\n          } else if (i === newRows - 1) {\n            newSurrounding[i][j - 1] += 1;\n            newSurrounding[i][j + 1] += 1;\n            newSurrounding[i - 1][j - 1] += 1;\n            newSurrounding[i - 1][j] += 1;\n            newSurrounding[i - 1][j + 1] += 1;\n          } else if (j === 0) {\n            newSurrounding[i][j + 1] += 1;\n            newSurrounding[i + 1][j] += 1;\n            newSurrounding[i + 1][j + 1] += 1;\n            newSurrounding[i - 1][j] += 1;\n            newSurrounding[i - 1][j + 1] += 1;\n          } else if (j === newColumns - 1) {\n            newSurrounding[i][j - 1] += 1;\n            newSurrounding[i + 1][j] += 1;\n            newSurrounding[i + 1][j - 1] += 1;\n            newSurrounding[i - 1][j] += 1;\n            newSurrounding[i - 1][j - 1] += 1;\n          } else {\n            newSurrounding[i][j - 1] += 1;\n            newSurrounding[i][j + 1] += 1;\n            newSurrounding[i + 1][j] += 1;\n            newSurrounding[i + 1][j + 1] += 1;\n            newSurrounding[i + 1][j - 1] += 1;\n            newSurrounding[i - 1][j] += 1;\n            newSurrounding[i - 1][j + 1] += 1;\n            newSurrounding[i - 1][j - 1] += 1;\n          }\n        }\n      }\n    }\n\n    this.setState({\n      difficulty: newDifficulty,\n      rows: newRows,\n      columns: newColumns,\n      numUnopened: newNumUnopened,\n      numMines: newNumMines,\n      flagsLeft: newFlagsLeft,\n      mines: newMines,\n      cleared: Array(newRows)\n        .fill()\n        .map(() => Array(newColumns).fill(false)),\n      flagged: Array(newRows)\n        .fill()\n        .map(() => Array(newColumns).fill(false)),\n      surrounding: newSurrounding\n    });\n  }\n\n  // event handler for left clicks on Square components\n  changeCleared(i, j) {\n    let squareFlagged = this.state.flagged[i][j];\n    let squareCleared = this.state.cleared[i][j];\n    let squareMine = this.state.mines[i][j];\n\n    // only allow unflagged squares to be cleared\n    if (!squareFlagged) {\n      // if the square is a mine, end the game\n      if (squareMine) {\n        // clear and unflag all squares so their state is displayed\n        let newCleared = Array(this.state.rows)\n          .fill()\n          .map(() => Array(this.state.columns).fill(true));\n        let newFlagged = Array(this.state.rows)\n          .fill()\n          .map(() => Array(this.state.columns).fill(false));\n\n        this.setState({\n          hasLost: true, // will result in modal being displayed\n          cleared: newCleared,\n          flagged: newFlagged\n        });\n      }\n\n      // if the square is not cleared already, clear it\n      else if (!squareCleared) {\n        let newCleared = this.state.cleared.slice();\n        this.clearSquares(i, j, newCleared);\n\n        // count how many squares are cleared\n        let newNumUnopened;\n        newNumUnopened = newCleared\n          .flat()\n          .reduce((acc, cur) => (cur === false ? (acc += 1) : acc), 0);\n\n        // check if the user has won\n        let winStatus = false;\n        if (newNumUnopened === this.state.numMines) {\n          winStatus = true;\n        }\n\n        this.setState({\n          cleared: newCleared,\n          numUnopened: newNumUnopened,\n          hasWon: winStatus\n        });\n      }\n    }\n  }\n\n  // helper function for changeCleared event handler\n  clearSquares(i, j, newCleared) {\n    // only clear uncleared and unflagged squares\n    if (!this.state.cleared[i][j] && !this.state.flagged[i][j]) {\n      newCleared[i][j] = true;\n\n      // recursively clears squares that have 0 surrounding mines\n      if (this.state.surrounding[i][j] === 0) {\n        // squares at corners\n        if (i === 0 && j === 0) {\n          this.clearSquares(i, j + 1, newCleared);\n          this.clearSquares(i + 1, j, newCleared);\n          this.clearSquares(i + 1, j + 1, newCleared);\n        } else if (i === 0 && j === this.state.columns - 1) {\n          this.clearSquares(i, j - 1, newCleared);\n          this.clearSquares(i + 1, j, newCleared);\n          this.clearSquares(i + 1, j - 1, newCleared);\n        } else if (i === this.state.rows - 1 && j === 0) {\n          this.clearSquares(i, j + 1, newCleared);\n          this.clearSquares(i - 1, j, newCleared);\n          this.clearSquares(i - 1, j + 1, newCleared);\n        } else if (i === this.state.rows - 1 && j === this.state.columns - 1) {\n          this.clearSquares(i, j - 1, newCleared);\n          this.clearSquares(i - 1, j, newCleared);\n          this.clearSquares(i - 1, j - 1, newCleared);\n        }\n        // squares at edge rows or columns\n        else if (i === 0) {\n          this.clearSquares(i, j + 1, newCleared);\n          this.clearSquares(i + 1, j, newCleared);\n          this.clearSquares(i, j - 1, newCleared);\n          this.clearSquares(i + 1, j - 1, newCleared);\n          this.clearSquares(i + 1, j + 1, newCleared);\n        } else if (i === this.state.rows - 1) {\n          this.clearSquares(i, j + 1, newCleared);\n          this.clearSquares(i - 1, j, newCleared);\n          this.clearSquares(i, j - 1, newCleared);\n          this.clearSquares(i - 1, j - 1, newCleared);\n          this.clearSquares(i - 1, j + 1, newCleared);\n        } else if (j === 0) {\n          this.clearSquares(i, j + 1, newCleared);\n          this.clearSquares(i + 1, j, newCleared);\n          this.clearSquares(i - 1, j, newCleared);\n          this.clearSquares(i - 1, j + 1, newCleared);\n          this.clearSquares(i + 1, j + 1, newCleared);\n        } else if (j === this.state.columns - 1) {\n          this.clearSquares(i, j - 1, newCleared);\n          this.clearSquares(i + 1, j, newCleared);\n          this.clearSquares(i - 1, j, newCleared);\n          this.clearSquares(i - 1, j - 1, newCleared);\n          this.clearSquares(i + 1, j - 1, newCleared);\n        } else {\n          this.clearSquares(i, j + 1, newCleared);\n          this.clearSquares(i, j - 1, newCleared);\n          this.clearSquares(i + 1, j, newCleared);\n          this.clearSquares(i - 1, j, newCleared);\n          this.clearSquares(i - 1, j - 1, newCleared);\n          this.clearSquares(i - 1, j + 1, newCleared);\n          this.clearSquares(i + 1, j - 1, newCleared);\n          this.clearSquares(i + 1, j + 1, newCleared);\n        }\n      }\n    }\n\n    return newCleared;\n  }\n\n  // event handler for right clicks on Square components\n  changeFlagged(i, j) {\n    let squareFlagged = this.state.flagged[i][j];\n    let squareCleared = this.state.cleared[i][j];\n\n    // only allow uncleared squares to be flagged and unflagged\n    if (!squareCleared) {\n      let newFlagged = this.state.flagged.slice();\n      let newFlagsLeft;\n\n      if (this.state.flagsLeft > 0 && !squareFlagged) {\n        newFlagged[i][j] = true;\n        newFlagsLeft = this.state.flagsLeft - 1;\n      } else if (squareFlagged) {\n        newFlagged[i][j] = false;\n        newFlagsLeft = this.state.flagsLeft + 1;\n      }\n\n      this.setState({ flagged: newFlagged, flagsLeft: newFlagsLeft });\n    }\n  }\n\n  render() {\n    // win or loss message\n    let message;\n    if (this.state.hasLost) {\n      message = (\n        <div>\n          <Modal>\n            You've lost, start a <NewGame />\n            &nbsp; ?\n          </Modal>\n        </div>\n      );\n    } else if (this.state.hasWon) {\n      message = (\n        <div>\n          <Modal>\n            You've won! Start a <NewGame />\n            &nbsp; ?\n          </Modal>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Board\">\n        <div className=\"SelectorBox\">\n          <Selector onChange={this.changeDifficulty} />\n          <span>Flags left: {this.state.flagsLeft}</span>\n        </div>\n        <div className=\"Squares\">\n          {\" \"}\n          {Array(this.state.rows)\n            .fill()\n            .map((row, rowindex) => (\n              <div className=\"Row\">\n                {\" \"}\n                {Array(this.state.columns)\n                  .fill()\n                  .map((col, colindex) => (\n                    <Square\n                      row={rowindex}\n                      col={colindex}\n                      onClick={this.changeCleared}\n                      onContextMenu={this.changeFlagged}\n                      isMine={this.state.mines[rowindex][colindex]}\n                      isFlagged={this.state.flagged[rowindex][colindex]}\n                      isCleared={this.state.cleared[rowindex][colindex]}\n                      surrounding={this.state.surrounding[rowindex][colindex]}\n                    />\n                  ))}{\" \"}\n              </div>\n            ))}\n        </div>\n        {message}\n      </div>\n    );\n  }\n}\n\n\n\nclass Selector extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      value: \"Easy\"\n    };\n  }\n\n  handleChange(e) {\n    // extract the new difficulty and\n    // call the parent class's event-handler\n    const difficulty = e.target.value;\n    this.setState({ value: difficulty });\n    this.props.onChange(difficulty);\n  }\n\n  render() {\n    return (\n      <div>\n        <select\n          className=\"Selector\"\n          onChange={this.handleChange}\n          style={{ width: `${10 * this.state.value.length + 14}px` }}\n        >\n          <option value=\"Easy\">Easy</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"Hard\">Hard</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleContextMenu = this.handleContextMenu.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.onClick(this.props.row, this.props.col);\n  }\n\n  handleContextMenu(e) {\n    e.preventDefault();\n    this.props.onContextMenu(this.props.row, this.props.col);\n  }\n\n  render() {\n    let info;\n    let squarecolor = this.props.isCleared ? \"lightgray\" : \"lightslategray\";\n\n    if (this.props.isFlagged) {\n      squarecolor = \"red\";\n      info = <p style={{ color: \"white\" }}>F</p>;\n    } else if (this.props.isCleared) {\n      if (this.props.isMine) {\n        squarecolor = \"gray\";\n        info = <p style={{ color: \"white\" }}>M</p>;\n      } else {\n        if (this.props.surrounding === 0) {\n          info = <p />;\n        } else {\n          if (this.props.surrounding === 1) {\n            info = <p style={{ color: \"blue\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 2) {\n            info = <p style={{ color: \"green\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 3) {\n            info = <p style={{ color: \"red\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 4) {\n            info = <p style={{ color: \"purple\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 5) {\n            info = <p style={{ color: \"maroon\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 6) {\n            info = <p style={{ color: \"azure\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 7) {\n            info = <p style={{ color: \"black\" }}>{this.props.surrounding}</p>;\n          } else if (this.props.surrounding === 8) {\n            info = <p style={{ color: \"gray\" }}>{this.props.surrounding}</p>;\n          }\n        }\n      }\n    }\n\n    return (\n      <button\n        className=\"Square\"\n        onClick={this.handleClick}\n        onContextMenu={this.handleContextMenu}\n        style={{ background: squarecolor }}\n      >\n        {info}\n      </button>\n    );\n  }\n}\n\nconst NewGame = () => {\n  return (\n    <button className=\"NewGame\" onClick={() => window.location.reload()}>\n      New game\n    </button>\n  );\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}